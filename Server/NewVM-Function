<!--
To use this script in production, update the default values in the param block to reflect your environment.
Enter a plain single or double digit number for the memory value. (For 8192/8GB enter "8")
Once all input values have been added, depending on the size of the template disk and the speed of the host storage array,
the script will hang during the copy operation.
-->
function New-HyperVVM {
    param (
        [string]$VMName = "NewVM",
        [int]$VMCPU = 2,
        [int64]$VMMemory = 4GB,
        [int64]$VMDiskSize = 80GB,
        [string]$VHDTemplatePath = "D:\HyperV\Templates\DefaultTemplate.vhdx",
        [string]$VHDStoragePath = "D:\HyperV\VMs",
        [string]$VMSwitch = "Default Switch"
    )

    try {
        Write-Host "Checking VHDX template..."
        if (-not (Test-Path $VHDTemplatePath)) {
            throw "VHDX template not found at path: $VHDTemplatePath"
        }
        Write-Host "VHDX template found."

        Write-Host "Copying and renaming the VHDX file..."
        $VHDPath = Join-Path $VHDStoragePath "$VMName.vhdx"
        Copy-Item -Path $VHDTemplatePath -Destination $VHDPath -ErrorAction Stop
        Write-Host "VHDX file copied and renamed."

        Write-Host "Creating the new VM..."
        $vm = New-VM -Name $VMName -MemoryStartupBytes $VMMemory -Generation 2 -SwitchName $VMSwitch -ErrorAction Stop
        Write-Host "VM '$VMName' created."

        Write-Host "Configuring VM processor and memory..."
        Set-VMProcessor -VM $vm -Count $VMCPU -ErrorAction Stop
        Write-Host "Processor set to $VMCPU cores."

        Write-Host "Adding VHDX to VM..."
        Add-VMHardDiskDrive -VM $vm -Path $VHDPath -ErrorAction Stop
        Write-Host "VHDX added to VM."

        Write-Host "VM $VMName created and configured successfully."
    }
    catch {
        Write-Host "An error occurred: $_"
    }
}

# Interactive input with default values
Write-Host "Please provide the necessary information to create a new VM. Press Enter to accept default values."
$vmName = Read-Host "Enter VM Name (Default: DefaultVM)"
if (-not $vmName) { $vmName = "DefaultVM" }

$vmCpu = Read-Host "Enter number of CPU cores (Default: 2)"
if (-not $vmCpu) { $vmCpu = 2 }

$vmMemoryInput = Read-Host "Enter memory size in GB (Default: 4)"
$vmMemory = if ($vmMemoryInput) { [int64]$vmMemoryInput * 1GB } else { 4GB }

$vmDiskSizeInput = Read-Host "Enter disk size in GB (Default: 40)"
$vmDiskSize = if ($vmDiskSizeInput) { [int64]$vmDiskSizeInput * 1GB } else { 40GB }

$vhdTemplatePath = Read-Host "Enter path of the sysprepped VHDX template (Example: C:\HyperV\Templates\DefaultTemplate.vhdx)"
if (-not $vhdTemplatePath) { $vhdTemplatePath = "C:\HyperV\Templates\DefaultTemplate.vhdx" }

$vhdStoragePath = Read-Host "Enter storage path for new VHDX (Example: C:\HyperV\VMs)"
if (-not $vhdStoragePath) { $vhdStoragePath = "C:\HyperV\VMs" }

$vmSwitch = Read-Host "Enter name of the virtual switch (Default: Default Switch)"
if (-not $vmSwitch) { $vmSwitch = "Default Switch" }

# Call the function to create the VM
New-HyperVVM -VMName $vmName -VMCPU $vmCpu -VMMemory $vmMemory -VMDiskSize $vmDiskSize -VHDTemplatePath $vhdTemplatePath -VHDStoragePath $vhdStoragePath -VMSwitch $vmSwitch
